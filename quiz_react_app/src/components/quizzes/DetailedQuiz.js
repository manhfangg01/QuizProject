import React, { useEffect, useState } from "react";
import { useParams, Link, useNavigate } from "react-router-dom";
import { showDetailQuiz } from "../../services/QuizServices";
import { toast } from "react-toastify";
import { Spinner, Table, Badge, Tab, Nav, Row, Col, Card, Alert, Button } from "react-bootstrap";
import UserBox from "./UserBox";
import { Form } from "react-bootstrap";
import { HiOutlineLightBulb } from "react-icons/hi";
const DetailedQuiz = () => {
  const { id } = useParams();
  const [detail, setDetail] = useState({});
  const [results, setResults] = useState([]);
  const [loading, setLoading] = useState(false);
  const [avatar, setAvatar] = useState("");
  const [username, setUsername] = useState("");
  const [message, setMessage] = useState("Here's your progress!");
  const [timeModifier, setTimeModifier] = useState("");
  const navigate = useNavigate();

  useEffect(() => {
    const userStr = localStorage.getItem("user");
    if (userStr) {
      try {
        const user = JSON.parse(userStr);
        setAvatar(user.avatar || "");
        setUsername(user.fullName || "");
      } catch (err) {
        console.error("Error parsing user", err);
      }
    }
  }, []);

  useEffect(() => {
    const fetchDetail = async () => {
      setLoading(true);
      try {
        const res = await showDetailQuiz(id);
        console.log("CHECK RES", res);
        if (res.statusCode === 200) {
          setDetail(res.data);
          setResults(res.data.results || []);
        } else {
          toast.warning("Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu chi ti·∫øt b√†i quiz.");
        }
      } catch (err) {
        toast.error("L·ªói khi g·ªçi API chi ti·∫øt b√†i quiz.");
      } finally {
        setLoading(false);
      }
    };

    fetchDetail();
  }, [id]);

  const formatTime = (seconds) => {
    if (!seconds || seconds === 0) return "0:00";
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, "0")}`;
  };

  const handleSelectTimeModifier = (time) => {
    setTimeModifier(time);
  };

  const TimeModifierSelect = () => {
    return (
      <Form.Select className="my-4" onChange={(e) => handleSelectTimeModifier(e.target.value)} value={timeModifier}>
        <option value="">Ch·ªçn th·ªùi gian</option>
        <option value="infinity">Kh√¥ng gi·ªõi h·∫°n</option> {/* ƒê·ªïi label cho r√µ r√†ng */}
        <option value="20">20 ph√∫t</option>
        <option value="25">25 ph√∫t</option>
        <option value="30">30 ph√∫t</option>
        <option value="35">35 ph√∫t</option>
        <option value="40">40 ph√∫t</option>
        <option value="45">45 ph√∫t</option>
        <option value="50">50 ph√∫t</option>
        <option value="55">55 ph√∫t</option>
        <option value="60">60 ph√∫t</option>
        <option value="65">65 ph√∫t</option>
        <option value="70">70 ph√∫t</option>
      </Form.Select>
    );
  };

  const handlePractice = (timeModifier) => {
    navigate(`/do-quiz/${id}?time=${timeModifier}`);
  };
  const handleTest = () => {
    navigate(`/do-quiz/${id}`);
  };
  return (
    <div className="container mt-4">
      <Row>
        <Col md={9}>
          <Card className="p-5">
            <h3 className="text-primary">{detail.quizTitle || "Chi ti·∫øt b√†i quiz"}</h3>
            <div className="mb-5">
              <p>
                <div>
                  <strong>Th·ªùi gian l√†m b√†i:</strong> {detail.timeLimit} ph√∫t | <strong>S·ªë c√¢u h·ªèi:</strong> {detail.totalQuestions} | <strong>Ph·∫ßn thi:</strong> {detail.totalParts} |{" "}
                  <strong>B√¨nh lu·∫≠n:</strong> {detail.totalComments}
                </div>
                <div>
                  <strong>Ng∆∞·ªùi ƒë√£ tham gia:</strong> <span>{detail.totalParticipants}</span>
                </div>
              </p>
            </div>
            <div style={{ fontSize: "20px" }}>
              <strong>K·∫øt qu·∫£ l√†m b√†i c·ªßa b·∫°n:</strong>
            </div>
            <br />

            {loading ? (
              <div className="text-center py-4">
                <Spinner animation="border" />
              </div>
            ) : results.length === 0 ? (
              <em>Ch∆∞a c√≥ k·∫øt qu·∫£ luy·ªán t·∫≠p n√†o.</em>
            ) : (
              <Table striped bordered hover>
                <thead>
                  <tr>
                    <th>Ng√†y l√†m</th>
                    <th>K·∫øt qu·∫£</th>
                    <th>Th·ªùi gian l√†m b√†i</th>
                    <th>Xem chi ti·∫øt</th>
                  </tr>
                </thead>
                <tbody>
                  {results.map((item, index) => (
                    <tr key={index}>
                      <td>{new Date(item.submittedDate).toLocaleDateString()}</td>
                      <td>
                        {item.score}/{item.totalQuestions}
                      </td>
                      <td>{formatTime(item.duration)}</td>
                      <td>
                        <Link to={`/results/${item.resultId}`}>Xem chi ti·∫øt</Link>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </Table>
            )}

            <Tab.Container defaultActiveKey="tab-practice">
              <Nav variant="tabs">
                <Nav.Item>
                  <Nav.Link eventKey="tab-practice">Luy·ªán t·∫≠p</Nav.Link>
                </Nav.Item>
                <Nav.Item>
                  <Nav.Link eventKey="tab-fulltest">L√†m Full Test</Nav.Link>
                </Nav.Item>
              </Nav>

              <Tab.Content className="mt-3">
                <Tab.Pane eventKey="tab-practice">
                  <Alert variant="success" className="d-flex align-items-start" style={{ borderRadius: "8px" }}>
                    {/* Ho·∫∑c d√πng tr·ª±c ti·∫øp icon Unicode */}
                    <span style={{ fontSize: "24px", marginRight: "10px", lineHeight: "1" }}>üí°</span>

                    <div>
                      <strong>Pro tips:</strong> H√¨nh th·ª©c luy·ªán t·∫≠p t·ª´ng ph·∫ßn v√† ch·ªçn m·ª©c th·ªùi gian ph√π h·ª£p s·∫Ω gi√∫p b·∫°n t·∫≠p trung v√†o gi·∫£i ƒë√∫ng c√°c c√¢u h·ªèi thay v√¨ ph·∫£i ch·ªãu √°p l·ª±c ho√†n th√†nh b√†i
                      thi.
                    </div>
                  </Alert>
                  <TimeModifierSelect className="mb-3" />
                  <Button className="btn btn-primary" onClick={() => handlePractice(timeModifier)}>
                    Luy·ªán t·∫≠p
                  </Button>
                </Tab.Pane>

                <Tab.Pane eventKey="tab-fulltest">
                  <div className="mt-2">
                    <p>Full test m√¥ ph·ªèng ƒë·ªÅ thi th·∫≠t v·ªõi th·ªùi gian v√† s·ªë l∆∞·ª£ng c√¢u h·ªèi t∆∞∆°ng ·ª©ng.</p>
                    <p>
                      <strong>Ghi ch√∫:</strong> L√†m full test s·∫Ω ƒë∆∞·ª£c quy ƒë·ªïi sang thang ƒëi·ªÉm chu·∫©n nh∆∞
                      <Badge bg="success" className="ms-1">
                        IELTS 9.0
                      </Badge>
                    </p>
                  </div>
                  <Button className="btn btn-primary" onClick={handleTest}>
                    B·∫Øt ƒë·∫ßu thi
                  </Button>
                </Tab.Pane>
              </Tab.Content>
            </Tab.Container>
          </Card>
        </Col>

        <Col md={3}>
          <div className="d-flex justify-content-between align-items-center mb-4">
            <UserBox avatarUrl={avatar} username={username} message={message} />
          </div>
        </Col>
      </Row>
    </div>
  );
};

export default DetailedQuiz;
